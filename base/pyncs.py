# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyncs', [dirname(__file__)])
        except ImportError:
            import _pyncs
            return _pyncs
        if fp is not None:
            try:
                _mod = imp.load_module('_pyncs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyncs = swig_import_helper()
    del swig_import_helper
else:
    import _pyncs
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyncs.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pyncs.SwigPyIterator_value(self)
    def incr(self, n=1): return _pyncs.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pyncs.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pyncs.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pyncs.SwigPyIterator_equal(self, *args)
    def copy(self): return _pyncs.SwigPyIterator_copy(self)
    def next(self): return _pyncs.SwigPyIterator_next(self)
    def __next__(self): return _pyncs.SwigPyIterator___next__(self)
    def previous(self): return _pyncs.SwigPyIterator_previous(self)
    def advance(self, *args): return _pyncs.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pyncs.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pyncs.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pyncs.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pyncs.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pyncs.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pyncs.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pyncs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DataSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DataSource, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _pyncs.delete_DataSource
    __del__ = lambda self : None;
    def __init__(self): 
        this = _pyncs.new_DataSource()
        try: self.this.append(this)
        except: self.this = this
DataSource_swigregister = _pyncs.DataSource_swigregister
DataSource_swigregister(DataSource)

class Generator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Generator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Generator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def generateString(self, *args): return _pyncs.Generator_generateString(self, *args)
    def generateInt(self, *args): return _pyncs.Generator_generateInt(self, *args)
    def generateDouble(self, *args): return _pyncs.Generator_generateDouble(self, *args)
    def generateList(self, *args): return _pyncs.Generator_generateList(self, *args)
    def generateParameters(self, *args): return _pyncs.Generator_generateParameters(self, *args)
    def name(self): return _pyncs.Generator_name(self)
    def base(self): return _pyncs.Generator_base(self)
    def makeProtobuf(self, *args): return _pyncs.Generator_makeProtobuf(self, *args)
    __swig_getmethods__["fromProtobuf"] = lambda x: _pyncs.Generator_fromProtobuf
    if _newclass:fromProtobuf = staticmethod(_pyncs.Generator_fromProtobuf)
    __swig_destroy__ = _pyncs.delete_Generator
    __del__ = lambda self : None;
Generator_swigregister = _pyncs.Generator_swigregister
Generator_swigregister(Generator)

def Generator_fromProtobuf(*args):
  return _pyncs.Generator_fromProtobuf(*args)
Generator_fromProtobuf = _pyncs.Generator_fromProtobuf

class ModelParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_ModelParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def getType(self): return _pyncs.ModelParameters_getType(self)
    def getGenerator(self, *args): return _pyncs.ModelParameters_getGenerator(self, *args)
    def get(self, *args): return _pyncs.ModelParameters_get(self, *args)
    def makeProtobuf(self, *args): return _pyncs.ModelParameters_makeProtobuf(self, *args)
    __swig_getmethods__["fromProtobuf"] = lambda x: _pyncs.ModelParameters_fromProtobuf
    if _newclass:fromProtobuf = staticmethod(_pyncs.ModelParameters_fromProtobuf)
    __swig_destroy__ = _pyncs.delete_ModelParameters
    __del__ = lambda self : None;
ModelParameters_swigregister = _pyncs.ModelParameters_swigregister
ModelParameters_swigregister(ModelParameters)

def ModelParameters_fromProtobuf(*args):
  return _pyncs.ModelParameters_fromProtobuf(*args)
ModelParameters_fromProtobuf = _pyncs.ModelParameters_fromProtobuf

class InputGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, InputGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, InputGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_InputGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNeuronAliases(self): return _pyncs.InputGroup_getNeuronAliases(self)
    def getModelParameters(self): return _pyncs.InputGroup_getModelParameters(self)
    def getProbability(self): return _pyncs.InputGroup_getProbability(self)
    def getStartTime(self): return _pyncs.InputGroup_getStartTime(self)
    def getEndTime(self): return _pyncs.InputGroup_getEndTime(self)
    def toProtobuf(self, *args): return _pyncs.InputGroup_toProtobuf(self, *args)
    __swig_getmethods__["fromProtobuf"] = lambda x: _pyncs.InputGroup_fromProtobuf
    if _newclass:fromProtobuf = staticmethod(_pyncs.InputGroup_fromProtobuf)
    __swig_destroy__ = _pyncs.delete_InputGroup
    __del__ = lambda self : None;
InputGroup_swigregister = _pyncs.InputGroup_swigregister
InputGroup_swigregister(InputGroup)

def InputGroup_fromProtobuf(*args):
  return _pyncs.InputGroup_fromProtobuf(*args)
InputGroup_fromProtobuf = _pyncs.InputGroup_fromProtobuf

class Geometry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pyncs.Geometry_x_set
    __swig_getmethods__["x"] = _pyncs.Geometry_x_get
    if _newclass:x = _swig_property(_pyncs.Geometry_x_get, _pyncs.Geometry_x_set)
    __swig_setmethods__["y"] = _pyncs.Geometry_y_set
    __swig_getmethods__["y"] = _pyncs.Geometry_y_get
    if _newclass:y = _swig_property(_pyncs.Geometry_y_get, _pyncs.Geometry_y_set)
    __swig_setmethods__["z"] = _pyncs.Geometry_z_set
    __swig_getmethods__["z"] = _pyncs.Geometry_z_get
    if _newclass:z = _swig_property(_pyncs.Geometry_z_get, _pyncs.Geometry_z_set)
    def __init__(self): 
        this = _pyncs.new_Geometry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyncs.delete_Geometry
    __del__ = lambda self : None;
Geometry_swigregister = _pyncs.Geometry_swigregister
Geometry_swigregister(Geometry)

class GeometryGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryGenerator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def generate(self, *args): return _pyncs.GeometryGenerator_generate(self, *args)
    __swig_destroy__ = _pyncs.delete_GeometryGenerator
    __del__ = lambda self : None;
GeometryGenerator_swigregister = _pyncs.GeometryGenerator_swigregister
GeometryGenerator_swigregister(GeometryGenerator)

class NeuronGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeuronGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeuronGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_NeuronGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def getNumberOfCells(self): return _pyncs.NeuronGroup_getNumberOfCells(self)
    def getModelParameters(self): return _pyncs.NeuronGroup_getModelParameters(self)
    def getGeometryGenerator(self): return _pyncs.NeuronGroup_getGeometryGenerator(self)
    __swig_destroy__ = _pyncs.delete_NeuronGroup
    __del__ = lambda self : None;
NeuronGroup_swigregister = _pyncs.NeuronGroup_swigregister
NeuronGroup_swigregister(NeuronGroup)

class NeuronAlias(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NeuronAlias, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NeuronAlias, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_NeuronAlias(*args)
        try: self.this.append(this)
        except: self.this = this
    def getGroups(self): return _pyncs.NeuronAlias_getGroups(self)
    __swig_destroy__ = _pyncs.delete_NeuronAlias
    __del__ = lambda self : None;
NeuronAlias_swigregister = _pyncs.NeuronAlias_swigregister
NeuronAlias_swigregister(NeuronAlias)

class SynapseGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynapseGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SynapseGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_SynapseGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    def getPresynapticGroups(self): return _pyncs.SynapseGroup_getPresynapticGroups(self)
    def getPostsynapticGroups(self): return _pyncs.SynapseGroup_getPostsynapticGroups(self)
    def getModelParameters(self): return _pyncs.SynapseGroup_getModelParameters(self)
    def getConnectionProbability(self): return _pyncs.SynapseGroup_getConnectionProbability(self)
    __swig_destroy__ = _pyncs.delete_SynapseGroup
    __del__ = lambda self : None;
SynapseGroup_swigregister = _pyncs.SynapseGroup_swigregister
SynapseGroup_swigregister(SynapseGroup)

class SynapseAlias(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SynapseAlias, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SynapseAlias, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_SynapseAlias(*args)
        try: self.this.append(this)
        except: self.this = this
    def getGroups(self): return _pyncs.SynapseAlias_getGroups(self)
    __swig_destroy__ = _pyncs.delete_SynapseAlias
    __del__ = lambda self : None;
SynapseAlias_swigregister = _pyncs.SynapseAlias_swigregister
SynapseAlias_swigregister(SynapseAlias)

class ModelSpecification(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModelSpecification, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModelSpecification, name)
    __repr__ = _swig_repr
    __swig_setmethods__["neuron_groups"] = _pyncs.ModelSpecification_neuron_groups_set
    __swig_getmethods__["neuron_groups"] = _pyncs.ModelSpecification_neuron_groups_get
    if _newclass:neuron_groups = _swig_property(_pyncs.ModelSpecification_neuron_groups_get, _pyncs.ModelSpecification_neuron_groups_set)
    __swig_setmethods__["neuron_aliases"] = _pyncs.ModelSpecification_neuron_aliases_set
    __swig_getmethods__["neuron_aliases"] = _pyncs.ModelSpecification_neuron_aliases_get
    if _newclass:neuron_aliases = _swig_property(_pyncs.ModelSpecification_neuron_aliases_get, _pyncs.ModelSpecification_neuron_aliases_set)
    __swig_setmethods__["synapse_groups"] = _pyncs.ModelSpecification_synapse_groups_set
    __swig_getmethods__["synapse_groups"] = _pyncs.ModelSpecification_synapse_groups_get
    if _newclass:synapse_groups = _swig_property(_pyncs.ModelSpecification_synapse_groups_get, _pyncs.ModelSpecification_synapse_groups_set)
    __swig_setmethods__["synapse_aliases"] = _pyncs.ModelSpecification_synapse_aliases_set
    __swig_getmethods__["synapse_aliases"] = _pyncs.ModelSpecification_synapse_aliases_get
    if _newclass:synapse_aliases = _swig_property(_pyncs.ModelSpecification_synapse_aliases_get, _pyncs.ModelSpecification_synapse_aliases_set)
    __swig_setmethods__["neuron_parameters"] = _pyncs.ModelSpecification_neuron_parameters_set
    __swig_getmethods__["neuron_parameters"] = _pyncs.ModelSpecification_neuron_parameters_get
    if _newclass:neuron_parameters = _swig_property(_pyncs.ModelSpecification_neuron_parameters_get, _pyncs.ModelSpecification_neuron_parameters_set)
    __swig_setmethods__["synapse_parameters"] = _pyncs.ModelSpecification_synapse_parameters_set
    __swig_getmethods__["synapse_parameters"] = _pyncs.ModelSpecification_synapse_parameters_get
    if _newclass:synapse_parameters = _swig_property(_pyncs.ModelSpecification_synapse_parameters_get, _pyncs.ModelSpecification_synapse_parameters_set)
    def __init__(self): 
        this = _pyncs.new_ModelSpecification()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyncs.delete_ModelSpecification
    __del__ = lambda self : None;
ModelSpecification_swigregister = _pyncs.ModelSpecification_swigregister
ModelSpecification_swigregister(ModelSpecification)

class Report(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Report, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Report, name)
    __repr__ = _swig_repr
    Neuron = _pyncs.Report_Neuron
    Synapse = _pyncs.Report_Synapse
    Input = _pyncs.Report_Input
    Unknown = _pyncs.Report_Unknown
    def __init__(self, *args): 
        this = _pyncs.new_Report(*args)
        try: self.this.append(this)
        except: self.this = this
    def getAliases(self): return _pyncs.Report_getAliases(self)
    def getTarget(self): return _pyncs.Report_getTarget(self)
    def getReportName(self): return _pyncs.Report_getReportName(self)
    def getPercentage(self): return _pyncs.Report_getPercentage(self)
    def getStartTime(self): return _pyncs.Report_getStartTime(self)
    def getEndTime(self): return _pyncs.Report_getEndTime(self)
    __swig_destroy__ = _pyncs.delete_Report
    __del__ = lambda self : None;
    def toProtobuf(self, *args): return _pyncs.Report_toProtobuf(self, *args)
    __swig_getmethods__["fromProtobuf"] = lambda x: _pyncs.Report_fromProtobuf
    if _newclass:fromProtobuf = staticmethod(_pyncs.Report_fromProtobuf)
Report_swigregister = _pyncs.Report_swigregister
Report_swigregister(Report)

def Report_fromProtobuf(*args):
  return _pyncs.Report_fromProtobuf(*args)
Report_fromProtobuf = _pyncs.Report_fromProtobuf

class SimulationParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimulationParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimulationParameters, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pyncs.new_SimulationParameters()
        try: self.this.append(this)
        except: self.this = this
    def setTimeStep(self, *args): return _pyncs.SimulationParameters_setTimeStep(self, *args)
    def getTimeStep(self): return _pyncs.SimulationParameters_getTimeStep(self)
    def setNeuronSeed(self, *args): return _pyncs.SimulationParameters_setNeuronSeed(self, *args)
    def getNeuronSeed(self): return _pyncs.SimulationParameters_getNeuronSeed(self)
    def setSynapseSeed(self, *args): return _pyncs.SimulationParameters_setSynapseSeed(self, *args)
    def getSynapseSeed(self): return _pyncs.SimulationParameters_getSynapseSeed(self)
    __swig_destroy__ = _pyncs.delete_SimulationParameters
    __del__ = lambda self : None;
SimulationParameters_swigregister = _pyncs.SimulationParameters_swigregister
SimulationParameters_swigregister(SimulationParameters)

class Simulation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Simulation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Simulation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_Simulation(*args)
        try: self.this.append(this)
        except: self.this = this
    def init(self, *args): return _pyncs.Simulation_init(self, *args)
    def step(self): return _pyncs.Simulation_step(self)
    def wait(self): return _pyncs.Simulation_wait(self)
    def addInput(self, *args): return _pyncs.Simulation_addInput(self, *args)
    def addReport(self, *args): return _pyncs.Simulation_addReport(self, *args)
    def shutdown(self): return _pyncs.Simulation_shutdown(self)
    def isMaster(self): return _pyncs.Simulation_isMaster(self)
    __swig_destroy__ = _pyncs.delete_Simulation
    __del__ = lambda self : None;
Simulation_swigregister = _pyncs.Simulation_swigregister
Simulation_swigregister(Simulation)

class AsciiStreamSink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsciiStreamSink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AsciiStreamSink, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_AsciiStreamSink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyncs.delete_AsciiStreamSink
    __del__ = lambda self : None;
AsciiStreamSink_swigregister = _pyncs.AsciiStreamSink_swigregister
AsciiStreamSink_swigregister(AsciiStreamSink)

class AsciiFileSink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AsciiFileSink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AsciiFileSink, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_AsciiFileSink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyncs.delete_AsciiFileSink
    __del__ = lambda self : None;
AsciiFileSink_swigregister = _pyncs.AsciiFileSink_swigregister
AsciiFileSink_swigregister(AsciiFileSink)

class BoxGenerator(GeometryGenerator):
    __swig_setmethods__ = {}
    for _s in [GeometryGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxGenerator, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoxGenerator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_BoxGenerator(*args)
        try: self.this.append(this)
        except: self.this = this
    def generate(self, *args): return _pyncs.BoxGenerator_generate(self, *args)
    __swig_destroy__ = _pyncs.delete_BoxGenerator
    __del__ = lambda self : None;
BoxGenerator_swigregister = _pyncs.BoxGenerator_swigregister
BoxGenerator_swigregister(BoxGenerator)

class ExactInteger(Generator):
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExactInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExactInteger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_ExactInteger(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateInt(self, *args): return _pyncs.ExactInteger_generateInt(self, *args)
    def generateDouble(self, *args): return _pyncs.ExactInteger_generateDouble(self, *args)
    def name(self): return _pyncs.ExactInteger_name(self)
    def makeProtobuf(self, *args): return _pyncs.ExactInteger_makeProtobuf(self, *args)
    __swig_destroy__ = _pyncs.delete_ExactInteger
    __del__ = lambda self : None;
ExactInteger_swigregister = _pyncs.ExactInteger_swigregister
ExactInteger_swigregister(ExactInteger)

class ExactDouble(Generator):
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExactDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExactDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_ExactDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateDouble(self, *args): return _pyncs.ExactDouble_generateDouble(self, *args)
    def name(self): return _pyncs.ExactDouble_name(self)
    def makeProtobuf(self, *args): return _pyncs.ExactDouble_makeProtobuf(self, *args)
    __swig_destroy__ = _pyncs.delete_ExactDouble
    __del__ = lambda self : None;
ExactDouble_swigregister = _pyncs.ExactDouble_swigregister
ExactDouble_swigregister(ExactDouble)

class ExactString(Generator):
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExactString, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExactString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_ExactString(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateString(self, *args): return _pyncs.ExactString_generateString(self, *args)
    def name(self): return _pyncs.ExactString_name(self)
    def makeProtobuf(self, *args): return _pyncs.ExactString_makeProtobuf(self, *args)
    __swig_destroy__ = _pyncs.delete_ExactString
    __del__ = lambda self : None;
ExactString_swigregister = _pyncs.ExactString_swigregister
ExactString_swigregister(ExactString)

class ExactList(Generator):
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExactList, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExactList, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_ExactList(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateList(self, *args): return _pyncs.ExactList_generateList(self, *args)
    def name(self): return _pyncs.ExactList_name(self)
    def makeProtobuf(self, *args): return _pyncs.ExactList_makeProtobuf(self, *args)
    __swig_destroy__ = _pyncs.delete_ExactList
    __del__ = lambda self : None;
ExactList_swigregister = _pyncs.ExactList_swigregister
ExactList_swigregister(ExactList)

class ExactParameters(Generator):
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ExactParameters, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ExactParameters, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_ExactParameters(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateParameters(self, *args): return _pyncs.ExactParameters_generateParameters(self, *args)
    def name(self): return _pyncs.ExactParameters_name(self)
    __swig_destroy__ = _pyncs.delete_ExactParameters
    __del__ = lambda self : None;
    def makeProtobuf(self, *args): return _pyncs.ExactParameters_makeProtobuf(self, *args)
ExactParameters_swigregister = _pyncs.ExactParameters_swigregister
ExactParameters_swigregister(ExactParameters)

class NormalDouble(Generator):
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NormalDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NormalDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_NormalDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateDouble(self, *args): return _pyncs.NormalDouble_generateDouble(self, *args)
    def name(self): return _pyncs.NormalDouble_name(self)
    def makeProtobuf(self, *args): return _pyncs.NormalDouble_makeProtobuf(self, *args)
    __swig_destroy__ = _pyncs.delete_NormalDouble
    __del__ = lambda self : None;
NormalDouble_swigregister = _pyncs.NormalDouble_swigregister
NormalDouble_swigregister(NormalDouble)

class NullSink(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NullSink, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NullSink, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_NullSink(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pyncs.delete_NullSink
    __del__ = lambda self : None;
NullSink_swigregister = _pyncs.NullSink_swigregister
NullSink_swigregister(NullSink)

class UniformInteger(Generator):
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformInteger, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniformInteger, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_UniformInteger(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateInt(self, *args): return _pyncs.UniformInteger_generateInt(self, *args)
    def name(self): return _pyncs.UniformInteger_name(self)
    def makeProtobuf(self, *args): return _pyncs.UniformInteger_makeProtobuf(self, *args)
    __swig_destroy__ = _pyncs.delete_UniformInteger
    __del__ = lambda self : None;
UniformInteger_swigregister = _pyncs.UniformInteger_swigregister
UniformInteger_swigregister(UniformInteger)

class UniformDouble(Generator):
    __swig_setmethods__ = {}
    for _s in [Generator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UniformDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [Generator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UniformDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pyncs.new_UniformDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def generateDouble(self, *args): return _pyncs.UniformDouble_generateDouble(self, *args)
    def name(self): return _pyncs.UniformDouble_name(self)
    def makeProtobuf(self, *args): return _pyncs.UniformDouble_makeProtobuf(self, *args)
    __swig_destroy__ = _pyncs.delete_UniformDouble
    __del__ = lambda self : None;
UniformDouble_swigregister = _pyncs.UniformDouble_swigregister
UniformDouble_swigregister(UniformDouble)

class string_to_generator_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_to_generator_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_to_generator_map, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.string_to_generator_map_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.string_to_generator_map___nonzero__(self)
    def __bool__(self): return _pyncs.string_to_generator_map___bool__(self)
    def __len__(self): return _pyncs.string_to_generator_map___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pyncs.string_to_generator_map___getitem__(self, *args)
    def __delitem__(self, *args): return _pyncs.string_to_generator_map___delitem__(self, *args)
    def has_key(self, *args): return _pyncs.string_to_generator_map_has_key(self, *args)
    def keys(self): return _pyncs.string_to_generator_map_keys(self)
    def values(self): return _pyncs.string_to_generator_map_values(self)
    def items(self): return _pyncs.string_to_generator_map_items(self)
    def __contains__(self, *args): return _pyncs.string_to_generator_map___contains__(self, *args)
    def key_iterator(self): return _pyncs.string_to_generator_map_key_iterator(self)
    def value_iterator(self): return _pyncs.string_to_generator_map_value_iterator(self)
    def __setitem__(self, *args): return _pyncs.string_to_generator_map___setitem__(self, *args)
    def asdict(self): return _pyncs.string_to_generator_map_asdict(self)
    def __init__(self, *args): 
        this = _pyncs.new_string_to_generator_map(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyncs.string_to_generator_map_empty(self)
    def size(self): return _pyncs.string_to_generator_map_size(self)
    def clear(self): return _pyncs.string_to_generator_map_clear(self)
    def swap(self, *args): return _pyncs.string_to_generator_map_swap(self, *args)
    def get_allocator(self): return _pyncs.string_to_generator_map_get_allocator(self)
    def begin(self): return _pyncs.string_to_generator_map_begin(self)
    def end(self): return _pyncs.string_to_generator_map_end(self)
    def rbegin(self): return _pyncs.string_to_generator_map_rbegin(self)
    def rend(self): return _pyncs.string_to_generator_map_rend(self)
    def count(self, *args): return _pyncs.string_to_generator_map_count(self, *args)
    def erase(self, *args): return _pyncs.string_to_generator_map_erase(self, *args)
    def find(self, *args): return _pyncs.string_to_generator_map_find(self, *args)
    def lower_bound(self, *args): return _pyncs.string_to_generator_map_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyncs.string_to_generator_map_upper_bound(self, *args)
    __swig_destroy__ = _pyncs.delete_string_to_generator_map
    __del__ = lambda self : None;
string_to_generator_map_swigregister = _pyncs.string_to_generator_map_swigregister
string_to_generator_map_swigregister(string_to_generator_map)

class generator_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, generator_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, generator_list, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.generator_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.generator_list___nonzero__(self)
    def __bool__(self): return _pyncs.generator_list___bool__(self)
    def __len__(self): return _pyncs.generator_list___len__(self)
    def pop(self): return _pyncs.generator_list_pop(self)
    def __getslice__(self, *args): return _pyncs.generator_list___getslice__(self, *args)
    def __setslice__(self, *args): return _pyncs.generator_list___setslice__(self, *args)
    def __delslice__(self, *args): return _pyncs.generator_list___delslice__(self, *args)
    def __delitem__(self, *args): return _pyncs.generator_list___delitem__(self, *args)
    def __getitem__(self, *args): return _pyncs.generator_list___getitem__(self, *args)
    def __setitem__(self, *args): return _pyncs.generator_list___setitem__(self, *args)
    def append(self, *args): return _pyncs.generator_list_append(self, *args)
    def empty(self): return _pyncs.generator_list_empty(self)
    def size(self): return _pyncs.generator_list_size(self)
    def clear(self): return _pyncs.generator_list_clear(self)
    def swap(self, *args): return _pyncs.generator_list_swap(self, *args)
    def get_allocator(self): return _pyncs.generator_list_get_allocator(self)
    def begin(self): return _pyncs.generator_list_begin(self)
    def end(self): return _pyncs.generator_list_end(self)
    def rbegin(self): return _pyncs.generator_list_rbegin(self)
    def rend(self): return _pyncs.generator_list_rend(self)
    def pop_back(self): return _pyncs.generator_list_pop_back(self)
    def erase(self, *args): return _pyncs.generator_list_erase(self, *args)
    def __init__(self, *args): 
        this = _pyncs.new_generator_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyncs.generator_list_push_back(self, *args)
    def front(self): return _pyncs.generator_list_front(self)
    def back(self): return _pyncs.generator_list_back(self)
    def assign(self, *args): return _pyncs.generator_list_assign(self, *args)
    def resize(self, *args): return _pyncs.generator_list_resize(self, *args)
    def insert(self, *args): return _pyncs.generator_list_insert(self, *args)
    def reserve(self, *args): return _pyncs.generator_list_reserve(self, *args)
    def capacity(self): return _pyncs.generator_list_capacity(self)
    __swig_destroy__ = _pyncs.delete_generator_list
    __del__ = lambda self : None;
generator_list_swigregister = _pyncs.generator_list_swigregister
generator_list_swigregister(generator_list)

class string_to_model_parameters_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_to_model_parameters_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_to_model_parameters_map, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.string_to_model_parameters_map_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.string_to_model_parameters_map___nonzero__(self)
    def __bool__(self): return _pyncs.string_to_model_parameters_map___bool__(self)
    def __len__(self): return _pyncs.string_to_model_parameters_map___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pyncs.string_to_model_parameters_map___getitem__(self, *args)
    def __delitem__(self, *args): return _pyncs.string_to_model_parameters_map___delitem__(self, *args)
    def has_key(self, *args): return _pyncs.string_to_model_parameters_map_has_key(self, *args)
    def keys(self): return _pyncs.string_to_model_parameters_map_keys(self)
    def values(self): return _pyncs.string_to_model_parameters_map_values(self)
    def items(self): return _pyncs.string_to_model_parameters_map_items(self)
    def __contains__(self, *args): return _pyncs.string_to_model_parameters_map___contains__(self, *args)
    def key_iterator(self): return _pyncs.string_to_model_parameters_map_key_iterator(self)
    def value_iterator(self): return _pyncs.string_to_model_parameters_map_value_iterator(self)
    def __setitem__(self, *args): return _pyncs.string_to_model_parameters_map___setitem__(self, *args)
    def asdict(self): return _pyncs.string_to_model_parameters_map_asdict(self)
    def __init__(self, *args): 
        this = _pyncs.new_string_to_model_parameters_map(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyncs.string_to_model_parameters_map_empty(self)
    def size(self): return _pyncs.string_to_model_parameters_map_size(self)
    def clear(self): return _pyncs.string_to_model_parameters_map_clear(self)
    def swap(self, *args): return _pyncs.string_to_model_parameters_map_swap(self, *args)
    def get_allocator(self): return _pyncs.string_to_model_parameters_map_get_allocator(self)
    def begin(self): return _pyncs.string_to_model_parameters_map_begin(self)
    def end(self): return _pyncs.string_to_model_parameters_map_end(self)
    def rbegin(self): return _pyncs.string_to_model_parameters_map_rbegin(self)
    def rend(self): return _pyncs.string_to_model_parameters_map_rend(self)
    def count(self, *args): return _pyncs.string_to_model_parameters_map_count(self, *args)
    def erase(self, *args): return _pyncs.string_to_model_parameters_map_erase(self, *args)
    def find(self, *args): return _pyncs.string_to_model_parameters_map_find(self, *args)
    def lower_bound(self, *args): return _pyncs.string_to_model_parameters_map_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyncs.string_to_model_parameters_map_upper_bound(self, *args)
    __swig_destroy__ = _pyncs.delete_string_to_model_parameters_map
    __del__ = lambda self : None;
string_to_model_parameters_map_swigregister = _pyncs.string_to_model_parameters_map_swigregister
string_to_model_parameters_map_swigregister(string_to_model_parameters_map)

class neuron_group_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neuron_group_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neuron_group_list, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.neuron_group_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.neuron_group_list___nonzero__(self)
    def __bool__(self): return _pyncs.neuron_group_list___bool__(self)
    def __len__(self): return _pyncs.neuron_group_list___len__(self)
    def pop(self): return _pyncs.neuron_group_list_pop(self)
    def __getslice__(self, *args): return _pyncs.neuron_group_list___getslice__(self, *args)
    def __setslice__(self, *args): return _pyncs.neuron_group_list___setslice__(self, *args)
    def __delslice__(self, *args): return _pyncs.neuron_group_list___delslice__(self, *args)
    def __delitem__(self, *args): return _pyncs.neuron_group_list___delitem__(self, *args)
    def __getitem__(self, *args): return _pyncs.neuron_group_list___getitem__(self, *args)
    def __setitem__(self, *args): return _pyncs.neuron_group_list___setitem__(self, *args)
    def append(self, *args): return _pyncs.neuron_group_list_append(self, *args)
    def empty(self): return _pyncs.neuron_group_list_empty(self)
    def size(self): return _pyncs.neuron_group_list_size(self)
    def clear(self): return _pyncs.neuron_group_list_clear(self)
    def swap(self, *args): return _pyncs.neuron_group_list_swap(self, *args)
    def get_allocator(self): return _pyncs.neuron_group_list_get_allocator(self)
    def begin(self): return _pyncs.neuron_group_list_begin(self)
    def end(self): return _pyncs.neuron_group_list_end(self)
    def rbegin(self): return _pyncs.neuron_group_list_rbegin(self)
    def rend(self): return _pyncs.neuron_group_list_rend(self)
    def pop_back(self): return _pyncs.neuron_group_list_pop_back(self)
    def erase(self, *args): return _pyncs.neuron_group_list_erase(self, *args)
    def __init__(self, *args): 
        this = _pyncs.new_neuron_group_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyncs.neuron_group_list_push_back(self, *args)
    def front(self): return _pyncs.neuron_group_list_front(self)
    def back(self): return _pyncs.neuron_group_list_back(self)
    def assign(self, *args): return _pyncs.neuron_group_list_assign(self, *args)
    def resize(self, *args): return _pyncs.neuron_group_list_resize(self, *args)
    def insert(self, *args): return _pyncs.neuron_group_list_insert(self, *args)
    def reserve(self, *args): return _pyncs.neuron_group_list_reserve(self, *args)
    def capacity(self): return _pyncs.neuron_group_list_capacity(self)
    __swig_destroy__ = _pyncs.delete_neuron_group_list
    __del__ = lambda self : None;
neuron_group_list_swigregister = _pyncs.neuron_group_list_swigregister
neuron_group_list_swigregister(neuron_group_list)

class string_to_neuron_group_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_to_neuron_group_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_to_neuron_group_map, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.string_to_neuron_group_map_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.string_to_neuron_group_map___nonzero__(self)
    def __bool__(self): return _pyncs.string_to_neuron_group_map___bool__(self)
    def __len__(self): return _pyncs.string_to_neuron_group_map___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pyncs.string_to_neuron_group_map___getitem__(self, *args)
    def __delitem__(self, *args): return _pyncs.string_to_neuron_group_map___delitem__(self, *args)
    def has_key(self, *args): return _pyncs.string_to_neuron_group_map_has_key(self, *args)
    def keys(self): return _pyncs.string_to_neuron_group_map_keys(self)
    def values(self): return _pyncs.string_to_neuron_group_map_values(self)
    def items(self): return _pyncs.string_to_neuron_group_map_items(self)
    def __contains__(self, *args): return _pyncs.string_to_neuron_group_map___contains__(self, *args)
    def key_iterator(self): return _pyncs.string_to_neuron_group_map_key_iterator(self)
    def value_iterator(self): return _pyncs.string_to_neuron_group_map_value_iterator(self)
    def __setitem__(self, *args): return _pyncs.string_to_neuron_group_map___setitem__(self, *args)
    def asdict(self): return _pyncs.string_to_neuron_group_map_asdict(self)
    def __init__(self, *args): 
        this = _pyncs.new_string_to_neuron_group_map(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyncs.string_to_neuron_group_map_empty(self)
    def size(self): return _pyncs.string_to_neuron_group_map_size(self)
    def clear(self): return _pyncs.string_to_neuron_group_map_clear(self)
    def swap(self, *args): return _pyncs.string_to_neuron_group_map_swap(self, *args)
    def get_allocator(self): return _pyncs.string_to_neuron_group_map_get_allocator(self)
    def begin(self): return _pyncs.string_to_neuron_group_map_begin(self)
    def end(self): return _pyncs.string_to_neuron_group_map_end(self)
    def rbegin(self): return _pyncs.string_to_neuron_group_map_rbegin(self)
    def rend(self): return _pyncs.string_to_neuron_group_map_rend(self)
    def count(self, *args): return _pyncs.string_to_neuron_group_map_count(self, *args)
    def erase(self, *args): return _pyncs.string_to_neuron_group_map_erase(self, *args)
    def find(self, *args): return _pyncs.string_to_neuron_group_map_find(self, *args)
    def lower_bound(self, *args): return _pyncs.string_to_neuron_group_map_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyncs.string_to_neuron_group_map_upper_bound(self, *args)
    __swig_destroy__ = _pyncs.delete_string_to_neuron_group_map
    __del__ = lambda self : None;
string_to_neuron_group_map_swigregister = _pyncs.string_to_neuron_group_map_swigregister
string_to_neuron_group_map_swigregister(string_to_neuron_group_map)

class neuron_alias_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, neuron_alias_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, neuron_alias_list, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.neuron_alias_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.neuron_alias_list___nonzero__(self)
    def __bool__(self): return _pyncs.neuron_alias_list___bool__(self)
    def __len__(self): return _pyncs.neuron_alias_list___len__(self)
    def pop(self): return _pyncs.neuron_alias_list_pop(self)
    def __getslice__(self, *args): return _pyncs.neuron_alias_list___getslice__(self, *args)
    def __setslice__(self, *args): return _pyncs.neuron_alias_list___setslice__(self, *args)
    def __delslice__(self, *args): return _pyncs.neuron_alias_list___delslice__(self, *args)
    def __delitem__(self, *args): return _pyncs.neuron_alias_list___delitem__(self, *args)
    def __getitem__(self, *args): return _pyncs.neuron_alias_list___getitem__(self, *args)
    def __setitem__(self, *args): return _pyncs.neuron_alias_list___setitem__(self, *args)
    def append(self, *args): return _pyncs.neuron_alias_list_append(self, *args)
    def empty(self): return _pyncs.neuron_alias_list_empty(self)
    def size(self): return _pyncs.neuron_alias_list_size(self)
    def clear(self): return _pyncs.neuron_alias_list_clear(self)
    def swap(self, *args): return _pyncs.neuron_alias_list_swap(self, *args)
    def get_allocator(self): return _pyncs.neuron_alias_list_get_allocator(self)
    def begin(self): return _pyncs.neuron_alias_list_begin(self)
    def end(self): return _pyncs.neuron_alias_list_end(self)
    def rbegin(self): return _pyncs.neuron_alias_list_rbegin(self)
    def rend(self): return _pyncs.neuron_alias_list_rend(self)
    def pop_back(self): return _pyncs.neuron_alias_list_pop_back(self)
    def erase(self, *args): return _pyncs.neuron_alias_list_erase(self, *args)
    def __init__(self, *args): 
        this = _pyncs.new_neuron_alias_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyncs.neuron_alias_list_push_back(self, *args)
    def front(self): return _pyncs.neuron_alias_list_front(self)
    def back(self): return _pyncs.neuron_alias_list_back(self)
    def assign(self, *args): return _pyncs.neuron_alias_list_assign(self, *args)
    def resize(self, *args): return _pyncs.neuron_alias_list_resize(self, *args)
    def insert(self, *args): return _pyncs.neuron_alias_list_insert(self, *args)
    def reserve(self, *args): return _pyncs.neuron_alias_list_reserve(self, *args)
    def capacity(self): return _pyncs.neuron_alias_list_capacity(self)
    __swig_destroy__ = _pyncs.delete_neuron_alias_list
    __del__ = lambda self : None;
neuron_alias_list_swigregister = _pyncs.neuron_alias_list_swigregister
neuron_alias_list_swigregister(neuron_alias_list)

class string_to_neuron_alias_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_to_neuron_alias_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_to_neuron_alias_map, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.string_to_neuron_alias_map_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.string_to_neuron_alias_map___nonzero__(self)
    def __bool__(self): return _pyncs.string_to_neuron_alias_map___bool__(self)
    def __len__(self): return _pyncs.string_to_neuron_alias_map___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pyncs.string_to_neuron_alias_map___getitem__(self, *args)
    def __delitem__(self, *args): return _pyncs.string_to_neuron_alias_map___delitem__(self, *args)
    def has_key(self, *args): return _pyncs.string_to_neuron_alias_map_has_key(self, *args)
    def keys(self): return _pyncs.string_to_neuron_alias_map_keys(self)
    def values(self): return _pyncs.string_to_neuron_alias_map_values(self)
    def items(self): return _pyncs.string_to_neuron_alias_map_items(self)
    def __contains__(self, *args): return _pyncs.string_to_neuron_alias_map___contains__(self, *args)
    def key_iterator(self): return _pyncs.string_to_neuron_alias_map_key_iterator(self)
    def value_iterator(self): return _pyncs.string_to_neuron_alias_map_value_iterator(self)
    def __setitem__(self, *args): return _pyncs.string_to_neuron_alias_map___setitem__(self, *args)
    def asdict(self): return _pyncs.string_to_neuron_alias_map_asdict(self)
    def __init__(self, *args): 
        this = _pyncs.new_string_to_neuron_alias_map(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyncs.string_to_neuron_alias_map_empty(self)
    def size(self): return _pyncs.string_to_neuron_alias_map_size(self)
    def clear(self): return _pyncs.string_to_neuron_alias_map_clear(self)
    def swap(self, *args): return _pyncs.string_to_neuron_alias_map_swap(self, *args)
    def get_allocator(self): return _pyncs.string_to_neuron_alias_map_get_allocator(self)
    def begin(self): return _pyncs.string_to_neuron_alias_map_begin(self)
    def end(self): return _pyncs.string_to_neuron_alias_map_end(self)
    def rbegin(self): return _pyncs.string_to_neuron_alias_map_rbegin(self)
    def rend(self): return _pyncs.string_to_neuron_alias_map_rend(self)
    def count(self, *args): return _pyncs.string_to_neuron_alias_map_count(self, *args)
    def erase(self, *args): return _pyncs.string_to_neuron_alias_map_erase(self, *args)
    def find(self, *args): return _pyncs.string_to_neuron_alias_map_find(self, *args)
    def lower_bound(self, *args): return _pyncs.string_to_neuron_alias_map_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyncs.string_to_neuron_alias_map_upper_bound(self, *args)
    __swig_destroy__ = _pyncs.delete_string_to_neuron_alias_map
    __del__ = lambda self : None;
string_to_neuron_alias_map_swigregister = _pyncs.string_to_neuron_alias_map_swigregister
string_to_neuron_alias_map_swigregister(string_to_neuron_alias_map)

class synapse_group_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, synapse_group_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, synapse_group_list, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.synapse_group_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.synapse_group_list___nonzero__(self)
    def __bool__(self): return _pyncs.synapse_group_list___bool__(self)
    def __len__(self): return _pyncs.synapse_group_list___len__(self)
    def pop(self): return _pyncs.synapse_group_list_pop(self)
    def __getslice__(self, *args): return _pyncs.synapse_group_list___getslice__(self, *args)
    def __setslice__(self, *args): return _pyncs.synapse_group_list___setslice__(self, *args)
    def __delslice__(self, *args): return _pyncs.synapse_group_list___delslice__(self, *args)
    def __delitem__(self, *args): return _pyncs.synapse_group_list___delitem__(self, *args)
    def __getitem__(self, *args): return _pyncs.synapse_group_list___getitem__(self, *args)
    def __setitem__(self, *args): return _pyncs.synapse_group_list___setitem__(self, *args)
    def append(self, *args): return _pyncs.synapse_group_list_append(self, *args)
    def empty(self): return _pyncs.synapse_group_list_empty(self)
    def size(self): return _pyncs.synapse_group_list_size(self)
    def clear(self): return _pyncs.synapse_group_list_clear(self)
    def swap(self, *args): return _pyncs.synapse_group_list_swap(self, *args)
    def get_allocator(self): return _pyncs.synapse_group_list_get_allocator(self)
    def begin(self): return _pyncs.synapse_group_list_begin(self)
    def end(self): return _pyncs.synapse_group_list_end(self)
    def rbegin(self): return _pyncs.synapse_group_list_rbegin(self)
    def rend(self): return _pyncs.synapse_group_list_rend(self)
    def pop_back(self): return _pyncs.synapse_group_list_pop_back(self)
    def erase(self, *args): return _pyncs.synapse_group_list_erase(self, *args)
    def __init__(self, *args): 
        this = _pyncs.new_synapse_group_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyncs.synapse_group_list_push_back(self, *args)
    def front(self): return _pyncs.synapse_group_list_front(self)
    def back(self): return _pyncs.synapse_group_list_back(self)
    def assign(self, *args): return _pyncs.synapse_group_list_assign(self, *args)
    def resize(self, *args): return _pyncs.synapse_group_list_resize(self, *args)
    def insert(self, *args): return _pyncs.synapse_group_list_insert(self, *args)
    def reserve(self, *args): return _pyncs.synapse_group_list_reserve(self, *args)
    def capacity(self): return _pyncs.synapse_group_list_capacity(self)
    __swig_destroy__ = _pyncs.delete_synapse_group_list
    __del__ = lambda self : None;
synapse_group_list_swigregister = _pyncs.synapse_group_list_swigregister
synapse_group_list_swigregister(synapse_group_list)

class string_to_synapse_group_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_to_synapse_group_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_to_synapse_group_map, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.string_to_synapse_group_map_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.string_to_synapse_group_map___nonzero__(self)
    def __bool__(self): return _pyncs.string_to_synapse_group_map___bool__(self)
    def __len__(self): return _pyncs.string_to_synapse_group_map___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pyncs.string_to_synapse_group_map___getitem__(self, *args)
    def __delitem__(self, *args): return _pyncs.string_to_synapse_group_map___delitem__(self, *args)
    def has_key(self, *args): return _pyncs.string_to_synapse_group_map_has_key(self, *args)
    def keys(self): return _pyncs.string_to_synapse_group_map_keys(self)
    def values(self): return _pyncs.string_to_synapse_group_map_values(self)
    def items(self): return _pyncs.string_to_synapse_group_map_items(self)
    def __contains__(self, *args): return _pyncs.string_to_synapse_group_map___contains__(self, *args)
    def key_iterator(self): return _pyncs.string_to_synapse_group_map_key_iterator(self)
    def value_iterator(self): return _pyncs.string_to_synapse_group_map_value_iterator(self)
    def __setitem__(self, *args): return _pyncs.string_to_synapse_group_map___setitem__(self, *args)
    def asdict(self): return _pyncs.string_to_synapse_group_map_asdict(self)
    def __init__(self, *args): 
        this = _pyncs.new_string_to_synapse_group_map(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyncs.string_to_synapse_group_map_empty(self)
    def size(self): return _pyncs.string_to_synapse_group_map_size(self)
    def clear(self): return _pyncs.string_to_synapse_group_map_clear(self)
    def swap(self, *args): return _pyncs.string_to_synapse_group_map_swap(self, *args)
    def get_allocator(self): return _pyncs.string_to_synapse_group_map_get_allocator(self)
    def begin(self): return _pyncs.string_to_synapse_group_map_begin(self)
    def end(self): return _pyncs.string_to_synapse_group_map_end(self)
    def rbegin(self): return _pyncs.string_to_synapse_group_map_rbegin(self)
    def rend(self): return _pyncs.string_to_synapse_group_map_rend(self)
    def count(self, *args): return _pyncs.string_to_synapse_group_map_count(self, *args)
    def erase(self, *args): return _pyncs.string_to_synapse_group_map_erase(self, *args)
    def find(self, *args): return _pyncs.string_to_synapse_group_map_find(self, *args)
    def lower_bound(self, *args): return _pyncs.string_to_synapse_group_map_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyncs.string_to_synapse_group_map_upper_bound(self, *args)
    __swig_destroy__ = _pyncs.delete_string_to_synapse_group_map
    __del__ = lambda self : None;
string_to_synapse_group_map_swigregister = _pyncs.string_to_synapse_group_map_swigregister
string_to_synapse_group_map_swigregister(string_to_synapse_group_map)

class synapse_alias_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, synapse_alias_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, synapse_alias_list, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.synapse_alias_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.synapse_alias_list___nonzero__(self)
    def __bool__(self): return _pyncs.synapse_alias_list___bool__(self)
    def __len__(self): return _pyncs.synapse_alias_list___len__(self)
    def pop(self): return _pyncs.synapse_alias_list_pop(self)
    def __getslice__(self, *args): return _pyncs.synapse_alias_list___getslice__(self, *args)
    def __setslice__(self, *args): return _pyncs.synapse_alias_list___setslice__(self, *args)
    def __delslice__(self, *args): return _pyncs.synapse_alias_list___delslice__(self, *args)
    def __delitem__(self, *args): return _pyncs.synapse_alias_list___delitem__(self, *args)
    def __getitem__(self, *args): return _pyncs.synapse_alias_list___getitem__(self, *args)
    def __setitem__(self, *args): return _pyncs.synapse_alias_list___setitem__(self, *args)
    def append(self, *args): return _pyncs.synapse_alias_list_append(self, *args)
    def empty(self): return _pyncs.synapse_alias_list_empty(self)
    def size(self): return _pyncs.synapse_alias_list_size(self)
    def clear(self): return _pyncs.synapse_alias_list_clear(self)
    def swap(self, *args): return _pyncs.synapse_alias_list_swap(self, *args)
    def get_allocator(self): return _pyncs.synapse_alias_list_get_allocator(self)
    def begin(self): return _pyncs.synapse_alias_list_begin(self)
    def end(self): return _pyncs.synapse_alias_list_end(self)
    def rbegin(self): return _pyncs.synapse_alias_list_rbegin(self)
    def rend(self): return _pyncs.synapse_alias_list_rend(self)
    def pop_back(self): return _pyncs.synapse_alias_list_pop_back(self)
    def erase(self, *args): return _pyncs.synapse_alias_list_erase(self, *args)
    def __init__(self, *args): 
        this = _pyncs.new_synapse_alias_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyncs.synapse_alias_list_push_back(self, *args)
    def front(self): return _pyncs.synapse_alias_list_front(self)
    def back(self): return _pyncs.synapse_alias_list_back(self)
    def assign(self, *args): return _pyncs.synapse_alias_list_assign(self, *args)
    def resize(self, *args): return _pyncs.synapse_alias_list_resize(self, *args)
    def insert(self, *args): return _pyncs.synapse_alias_list_insert(self, *args)
    def reserve(self, *args): return _pyncs.synapse_alias_list_reserve(self, *args)
    def capacity(self): return _pyncs.synapse_alias_list_capacity(self)
    __swig_destroy__ = _pyncs.delete_synapse_alias_list
    __del__ = lambda self : None;
synapse_alias_list_swigregister = _pyncs.synapse_alias_list_swigregister
synapse_alias_list_swigregister(synapse_alias_list)

class string_to_synapse_alias_map(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_to_synapse_alias_map, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_to_synapse_alias_map, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.string_to_synapse_alias_map_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.string_to_synapse_alias_map___nonzero__(self)
    def __bool__(self): return _pyncs.string_to_synapse_alias_map___bool__(self)
    def __len__(self): return _pyncs.string_to_synapse_alias_map___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _pyncs.string_to_synapse_alias_map___getitem__(self, *args)
    def __delitem__(self, *args): return _pyncs.string_to_synapse_alias_map___delitem__(self, *args)
    def has_key(self, *args): return _pyncs.string_to_synapse_alias_map_has_key(self, *args)
    def keys(self): return _pyncs.string_to_synapse_alias_map_keys(self)
    def values(self): return _pyncs.string_to_synapse_alias_map_values(self)
    def items(self): return _pyncs.string_to_synapse_alias_map_items(self)
    def __contains__(self, *args): return _pyncs.string_to_synapse_alias_map___contains__(self, *args)
    def key_iterator(self): return _pyncs.string_to_synapse_alias_map_key_iterator(self)
    def value_iterator(self): return _pyncs.string_to_synapse_alias_map_value_iterator(self)
    def __setitem__(self, *args): return _pyncs.string_to_synapse_alias_map___setitem__(self, *args)
    def asdict(self): return _pyncs.string_to_synapse_alias_map_asdict(self)
    def __init__(self, *args): 
        this = _pyncs.new_string_to_synapse_alias_map(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _pyncs.string_to_synapse_alias_map_empty(self)
    def size(self): return _pyncs.string_to_synapse_alias_map_size(self)
    def clear(self): return _pyncs.string_to_synapse_alias_map_clear(self)
    def swap(self, *args): return _pyncs.string_to_synapse_alias_map_swap(self, *args)
    def get_allocator(self): return _pyncs.string_to_synapse_alias_map_get_allocator(self)
    def begin(self): return _pyncs.string_to_synapse_alias_map_begin(self)
    def end(self): return _pyncs.string_to_synapse_alias_map_end(self)
    def rbegin(self): return _pyncs.string_to_synapse_alias_map_rbegin(self)
    def rend(self): return _pyncs.string_to_synapse_alias_map_rend(self)
    def count(self, *args): return _pyncs.string_to_synapse_alias_map_count(self, *args)
    def erase(self, *args): return _pyncs.string_to_synapse_alias_map_erase(self, *args)
    def find(self, *args): return _pyncs.string_to_synapse_alias_map_find(self, *args)
    def lower_bound(self, *args): return _pyncs.string_to_synapse_alias_map_lower_bound(self, *args)
    def upper_bound(self, *args): return _pyncs.string_to_synapse_alias_map_upper_bound(self, *args)
    __swig_destroy__ = _pyncs.delete_string_to_synapse_alias_map
    __del__ = lambda self : None;
string_to_synapse_alias_map_swigregister = _pyncs.string_to_synapse_alias_map_swigregister
string_to_synapse_alias_map_swigregister(string_to_synapse_alias_map)

class string_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, string_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, string_list, name)
    __repr__ = _swig_repr
    def iterator(self): return _pyncs.string_list_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pyncs.string_list___nonzero__(self)
    def __bool__(self): return _pyncs.string_list___bool__(self)
    def __len__(self): return _pyncs.string_list___len__(self)
    def pop(self): return _pyncs.string_list_pop(self)
    def __getslice__(self, *args): return _pyncs.string_list___getslice__(self, *args)
    def __setslice__(self, *args): return _pyncs.string_list___setslice__(self, *args)
    def __delslice__(self, *args): return _pyncs.string_list___delslice__(self, *args)
    def __delitem__(self, *args): return _pyncs.string_list___delitem__(self, *args)
    def __getitem__(self, *args): return _pyncs.string_list___getitem__(self, *args)
    def __setitem__(self, *args): return _pyncs.string_list___setitem__(self, *args)
    def append(self, *args): return _pyncs.string_list_append(self, *args)
    def empty(self): return _pyncs.string_list_empty(self)
    def size(self): return _pyncs.string_list_size(self)
    def clear(self): return _pyncs.string_list_clear(self)
    def swap(self, *args): return _pyncs.string_list_swap(self, *args)
    def get_allocator(self): return _pyncs.string_list_get_allocator(self)
    def begin(self): return _pyncs.string_list_begin(self)
    def end(self): return _pyncs.string_list_end(self)
    def rbegin(self): return _pyncs.string_list_rbegin(self)
    def rend(self): return _pyncs.string_list_rend(self)
    def pop_back(self): return _pyncs.string_list_pop_back(self)
    def erase(self, *args): return _pyncs.string_list_erase(self, *args)
    def __init__(self, *args): 
        this = _pyncs.new_string_list(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pyncs.string_list_push_back(self, *args)
    def front(self): return _pyncs.string_list_front(self)
    def back(self): return _pyncs.string_list_back(self)
    def assign(self, *args): return _pyncs.string_list_assign(self, *args)
    def resize(self, *args): return _pyncs.string_list_resize(self, *args)
    def insert(self, *args): return _pyncs.string_list_insert(self, *args)
    def reserve(self, *args): return _pyncs.string_list_reserve(self, *args)
    def capacity(self): return _pyncs.string_list_capacity(self)
    __swig_destroy__ = _pyncs.delete_string_list
    __del__ = lambda self : None;
string_list_swigregister = _pyncs.string_list_swigregister
string_list_swigregister(string_list)

# This file is compatible with both classic and new-style classes.


